/*

**Problem Statement: Implementing Abstraction in Java**
Create a Java program that demonstrates the concept of abstraction by modeling a simple banking system. The system should have a base abstract class `BankAccount` with two subclasses `SavingsAccount` and `CheckingAccount`. The abstract class should contain essential attributes and methods, while the subclasses should provide concrete implementations.
**Requirements:**
1. Create an abstract class `BankAccount` with the following attributes and methods:
- Attributes:
- `accountNumber` (String): To store the account number.
- `accountHolderName` (String): To store the account holder's name.
- `balance` (double): To store the account balance.
- Methods:
- `getAccountNumber()`: Abstract method to get the account number.
- `getAccountHolderName()`: Abstract method to get the account holder's name.
- `getBalance()`: Abstract method to get the account balance.
- `deposit(double amount)`: Abstract method to deposit the given amount.
- `withdraw(double amount)`: Abstract method to withdraw the given amount.
2. Create a concrete subclass `SavingsAccount` that extends `BankAccount` with the following additional features:
- Implement the abstract methods from the base class.
- Include an attribute `interestRate` (double) to store the interest rate.
- Implement a constructor to initialize attributes.
- Override the `withdraw` method to check for a minimum balance.
3. Create another concrete subclass `CheckingAccount` that extends `BankAccount` with the following additional features:
- Implement the abstract methods from the base class.
- Include an attribute `overdraftLimit` (double) to store the overdraft limit.
- Implement a constructor to initialize attributes.
- Override the `withdraw` method to consider the overdraft limit.
4. In the main program:
- Create instances of `SavingsAccount` and `CheckingAccount`.
- Demonstrate deposit and withdrawal operations on both account types.
- Display the account information including balance after each transaction.
**Note:**
- Use appropriate access modifiers and encapsulation principles.
- Ensure that you showcase abstraction by defining abstract methods in the base class and providing concrete implementations in the subclasses.
- Properly handle scenarios like insufficient balance during withdrawals.
This problem statement focuses on implementing abstraction using Java's abstract classes and methods. It aims to showcase how abstract classes can define a blueprint while leaving certain implementation details to concrete subclasses.



**Problem Statement: if â€“ else : Grade Calculator**
You are tasked with writing a Java program that calculates the grade of a student based on their exam score. The program should take the exam score as input and then determine and display the corresponding grade according to the following rules:
- If the score is greater than or equal to 90, the grade is "A."
- If the score is between 80 (inclusive) and 89 (inclusive), the grade is "B."
- If the score is between 70 (inclusive) and 79 (inclusive), the grade is "C."
- If the score is between 60 (inclusive) and 69 (inclusive), the grade is "D."
- If the score is below 60, the grade is "F."
Your program should use an `if-else` statement to make this determination and print out the calculated grade.
Example Output:
```
Enter the exam score: 87
The grade is B.
```
Please write a Java program to solve this problem and demonstrate the use of `if-else` conditions for grade calculation based on the provided rules

 

Problem Description: "Creating a Product Inventory Class with Constructors"

You are tasked with creating a Java class to represent products in an inventory system. The class should have constructors to initialize product objects with basic information. You'll then create instances of this class and demonstrate how to use constructors effectively.
Requirements: Create a Java class named Product with the following attributes:
productId (int): An integer to store the product's ID.
productName (String): A string to store the name of the product.
price (double): A double to store the price of the product.
quantityInStock (int): An integer to store the quantity of the product in stock.
Implement a parameterized constructor in the Product class that takes arguments to initialize the attributes mentioned above.
Implement a default constructor in the Product class that initializes the attributes with default values (e.g., productId = 0, productName = "", price = 0.0, quantityInStock = 0).
Create at least two objects of the Product class using both the default constructor and the parameterized constructor.
Demonstrate how to update the quantity of products in stock and print the product information (attributes) after each update.


Problem Statement: Implementing Method Overloading and Method Overriding in a Library System
As a fresher in the field of software development, you have been tasked with creating a library management system that demonstrates your knowledge of method overloading and method overriding in object-oriented programming. The library system should be able to handle various types of library materials, including books, e-books, and DVDs.
Your program should include the following classes:
1. **LibraryItem:**
- This is the base class representing a generic library item.
- It should have attributes such as `title`, `author`, and `location`.
- Implement a method called `displayInfo` that displays basic information about the item.
2. **Book:**
- A derived class from the LibraryItem class.
- It should have additional attributes like `genre` and `numberOfPages`.
- Implement method overriding for the `displayInfo` method to display specific information about books.
3. **EBook:**
- Another derived class from the LibraryItem class.
- It should include attributes like `format` (e.g., PDF, ePub) and `fileSize`.
- Implement method overriding for the `displayInfo` method to display specific information about e-books.
4. **DVD:**
- A third derived class from the LibraryItem class.
- It should have attributes like `director` and `runTime`.
- Implement method overriding for the `displayInfo` method to display specific information about DVDs.
Your program should allow the user to:
- Create different types of library items (books, e-books, DVDs).
- Display information about specific items.
- Search for items based on various criteria, such as title, author, or location.

*/
NOTES

6/09/2023

1. the variable is name given to some memory location
2. the variables are used to store the values
3. when we need to store the values, we must use variables.
4. we can take n number of variables in our program; but we should take only required number of variables.

~ namming conventions=
1. any combination of a-z A-Z 0-9 _ and $ are allowed
2. the var name should not start with digit
3. keywords are not allowed as a variable name

---------------------------------------------------------------------------------------------------------------------

7//09/2023

~Operators:

1. Arithmatic- basic math operations
2. relational- comparison
3. Assignment- to assign the value
4. logical- think logically and give final response
5. increament/decreeament
6. bitwise - bit by bit binary
7. misc- mixures

1. Arithmetic operators:-
	+ plus == adds the values
	- minus == substracts the values
	* asterisk == multiplies
	/ slash == divides and gives quotient
	% modulas == divides and gives remainder
	
2. Relational operators(is the only operator which returns only true or false):-
	<   --  less than
	<=  --  less than or equal to
	>   --  greater than
	>=  --  greater than or equal to
	==  --  equal equal to
	!=  --  not equal to


8/9/2023

3. Assignment operators:-
	=	--	assigns the value
	+=	--	adds the value using short-form(eg- int a += 2 --> int a = a+2)
	-=	--	                      |same|
	*=	--	                      |same|
	/=	--	                      |same|
	%=	--	                      |same|
	<<=	--	
	>>=	--	
	<<<<=	--	
	>>>>=	--
	
4. Logical operators:-
	1. &&	--	AND
	Truth table --
	i/p	i/p	o/p
	0	0	0
	0	1	0
	1	0	0
	1	1	1
	
	
	2. ||	--	OR
	Truth table --
	i/p	i/p	o/p
	0	0	0
	0	1	0
	1	0	0
	1	1	1
	
	
	3. ~	--	NOT
	Truth table --
	i/p	o/p
	0	1
	1	0
	
	
October 5::
* What is class?
	- The class is blueprint/prototype model of an object.
	- The class is collection of Variables & Methods ONLY.
	
* What is object?
	- The object is replica/photocopy of the class.
	- The Object is created with the help of Class.
	- In interview don't say like "CLASS IS COLLECTION OF OBJECTS"
	
	
* Encapsulation::
	- The encapsulation is binding logically related data together.
	- In a class, take only those parameters which are applicable to that category.
	  e.g.- 
	  class Bird{
	  	will have properties like:
	  		color, sound, locationOfBird, breed, etc.
	  	not like:
	  		salary, education, etc.
	  }

* Getters & Setters Methods::
	- The Getter method Gets(Reads) the value.
	- The Setter method Sets(Writes) the value.
	- The Getter method will ALWAYS return the value but NEVER takes the parameter.
	- The Setter method will NEVER return the value but ALWAYS take the parameter.
	- The Getters & Setters Methods should always be PUBLIC so that you can access PRIVATE variables via PUBLIC get/set.
	- The Getters & Setters Methods are dedicated to a variable; not combined.


October 06
IB- Instance block
also known as:
IIB- Instance Initializing Block

Instance == Object

1. IB is optional
2. we can write n number of ib's in the class
3. the ib gets called everytime when instance is created
4. In case of multiple IB's top - down sequence is follwed 
5. In case of multiple IB's ALL IB's will be called for all objects
6. In case of multiple IBs, last IB value set is mainted
7. The nested IBs are not allowed
8. We can write n number of lines of code in IB

October 7
SB- Static Block

Common for all objects
1. SB is optional
2. we can write n number of SB's in the class
3. the SB gets called only once when the class is loaded into the jvm memory.
4. In case of multiple SB's top - down sequence is followed 
5. When class is loaded into memory, SB gets called/executed
6. In case of multiple SBs, ALL  SB value will be called
7. The nested SBs are not allowed
8. We can write n number of lines of code in SB
9. SB can acccess ONLY static variables
10. The IB can access BOTH static as well as non-static variables


October 9:
Constructor: It is a special method which has same name as that of class and it has no return type; not even void.

We must use new keyword to call constructor, Without new keyword, the constructor cannot be called.

Types of constructors:
1. Parameterized(define by developers)
2. Non-Parameterized(define by developers)
3. Default (Defined by system)

The default constructor is written/provided by the system IF and ONLY IF developer has NOT defined any constructor in the class

The default constructor has NO parameters
The developer can NOT define/edit/see default constructor.
We can define multiple constructors in the class with the unique signatures.
The priority flows like SB -> IB -> Constructor.
The constructor should be called 'n' times to create 'n' objects.


October 10:
* Inheritance(Day 1):-
	- It is act of re-using pre-existing class to create new classes.
	- Re-usability --> Save time and efforts. 


October 11:
Inheritance(Day 2)::
	It is process of creating new class(Sub/Child Class) extending pre-existing class(Super/Parent Class), where extended class 
	access all properties of Super-Class.
	
1. The final keyword stops the inheritance
2. The final class can not be extended
3. The constructor of parent has more priority than IB of child
4. Using classes, multiple inheritance is not possible. However we can achieve it by using interface.
5. In case of IBs, IB Parent -> IB Child
6. In case of SBs, SB Parent -> SB Child
7. In case of Constructor, Cons Parent -> Cons Child
8. In case of IBs, SBs and Constructors,
	SB Parent -> SB Child -> IB Parent -> Cons Parent -> IB Child -> Cons Child
9. The hybrid inheritance is combination of any of other types.
10. Only single/simple inheritance can have fixed diagram. Other types involves 'n' classes.
11. Minimum number of classes for Hierarchy, multiple, multi-level and Hybrid types is THREE.  


October 12:
Polymorphism: An ability to gain multiple forms.

Polymorphism Types
1. Overloading (Synonyms)
* Method Overloading
* Early binding
* Static Polymorphism
* Compile Time Poly.

2. Overriding(Synonyms)
* Method Overriding
* Late binding
* Dynamic Polymorphism
* Run Time Poly.

#OverLoading:

Method overloading = Normal task + Extra task

Notes-
1. Methods with SAME name but DIFFERENT signature are called as Overloaded method.
2. We can overload a method 'n' times.
3. Whenever we need to achieve some functionality in different ways, we can overload a method.
4. The constructor can be overloaded.
5. The method overloading is possible with or without inheritance.



October 16:
*this keyword is used in identifying duplicate values.

1. The method overriding is NOT possible without inheritance.
2. The method overloading is possible with or without inheritance.
3. Method overriding = Method re-defined
4. The use of "super" keyword to call properties of parent class in child class is optional.
5. Method overriding is optional.
6. If we want to enhance already defined method in child class, we must override the method.
7. Method with SAME NAME & SAME SIGNATURE in "inherited" class is called as method overriding.
8. We can NOT override the constructor.
9. The final method can NOT be overrided.
10. We can override method 'n' times.


October 17:
1. Abstract = incomplete
2. The interface is NOT a class.
3. The interface is collection abstract methods and public static and final variables.
4. We can NOT instantiate the interface. Means we can NOT create object of interface.
5. We can implement the interface in 'n' number of classes.
6. The class which implements the interface MUST define the abstract methods interface.
7. The interface is ALWAYS implemented in a class.
8. The normal class can NOT host abstract methods.
9. The variables in the interface are by default public, static and final.
10. Abstract method:
	The method with ONLY declaration and NO body/definition.
11. Why Interface?
Ans1- When we do not have concrete definition of a method we use interface.
Ans2- To achieve multiple inheritance.



October 19:
*abstract = incomplete
1. The abstract class contains normal & abstract methods.
2. The abstract class MUST have a child class(must be extended by child class)
3. The abstract class can NOT be instantiated(we can NOT create objects of abstract class)
4. To make class abstract, we use 'abstract' keyword.
5. When there is abstract keyword that class must be inherited.
6. We can NOT declare abstract class as a final,it should be either abstract or final.
7. The variables in abstract class are absolutely normal.
8. The abstract class must be EXTENDED.
9. The interface achieves 100% abstraction, normal class achieves 0% abstraction whereas the abstract class achieve 
   partial abstraction(both complete and incomplete methods).
10. The abstract class can be extended in multiple classes.
11. The child class of abstract class should either define all abstract methods or make itself as abstract.
12. Using abstract classes, multiple inheritance is NOT possible.
13. We can define constructor in abstract class but it is NEVER used/suggested.


October 25:

* Array- it is collection of similar elements/values in consecutive memory location.
* Use of array- is to reduce memory traversal(as ordinary variables)
* Types of arrays- 1] Initialized Array
				   2] Non-Initialized Array
				   EXTRA- 1D Array, 2D Array, Multi-Dimentional Array.
				   


October 26:

1. The index of array always starts with 0.
2. The length of array always starts with 1.
3. There is huge difference between i and arr[i].
4. To process all array elements, formulate once in the loop and process arr[i] once.


November 3
1. Strings are immutable
2. String pool:
	--> It is dedicated memory for storing all string values ONLY.
	* It supports memory utilization.
	* Immutable = permanent = constant = unchangable 
3. Declaring string in two ways
	1) String str = "Hello";				**Recommended way for creating string**
	2) String str = new String("Hello")
4. '==' checks whether two strings values belongs to same memory location or not.
5. '.equalsto' checks whether two string values are same or not.



November 6

* String are immutable - correct
* But, if required, we can make strings mutable as well
* StringBuilder & StringBuffer

* StringBuffer:
	1. All methods in this class are synchronized(one-by-one)
	2. Thread-safe
	3. Slower in execution
	
* StringBuilder:
	1. All methods in this class are NOT synchronized(At a time)
	2. Thread-Unsafe
	3. Faster in execution
	


November 20::
Garbage Collection in Java:
	* Java's feature: Garbage collection;
	* Garbage = Un-used data/orphan object.
	* Garbage collection = To clean the used memory by an un-used data.
	* JVM track or monitors the memory.
	* Garbage collection is performed by JVM it-self.
	* Orphan object = The object with no reference.
	* Important Questions:
		1. What is Orphan object?
		2. Explain final, finally & finalize.
	* Garbage collection defination:
		- This is the concept used for cleaning up the memory.
		- It's not guaranteed.
		- We need to advice JVM by calling "gc()" method of system class "System.gc()".
		- It is expected from developers to make objects unclaimed so that "gc()" will clean it up.
		- Before running gc's "finalize" method of "object" class will be called if you write something there than code will
		  be executed.
		  
	* Sample Code:
		- public class Car{
			public String Name;
		  	public static void main(){
		  		Car obj = new Car();
		  		System.out.println(obj.name="WagonR");
		  			//output:	WagonR
		  		
		  		//here we are making object un-used/un-link from reference
		  		obj = null;
		  		System.out.println(obj);
		  			//output:	no reference
		  		
		  		System.gc();	//optional
		  	}
		  }	


November 23::
* Serialization:
	Q. What is serialization?
	A. Serialization == Writing(Saving) an object into a file.
		De-serialization == Reading(Copying) an object from the file.
	
	Q. Why to use serialization?
	A. 1- If there exists a time gap between creation of object & its usage, then we use concept of serialization for memory management.
	   2- For easy transfer/travel.
	   		e.g.- if there are 100 objects then,
	   				100 Objects --> File --> Then send that ONE file with 100 objects.
	   				
	* Classes involved in Serialization process:
		- FileOutputStream -- This class can write(output) a file.
		- ObjectOutputStream -- This class can write(output) an object.
	
	* Classes involved in De-serialization process:
		- FileInputStream -- This class can read(input) a file.
		- ObjectInputStream -- This class can read(input) an object.
		
	Q. What is transient Keyword?
	A. If we don not want to save any irrelevant variable in a file then just write "transient" keyword before variable name.
		e.g.-	public transient int RollNumber;



November 23 & 24::
* Exception Handling in java-
	Q. What is Exception?
	A. The problem occured during execution or when problem has thrown the exception.
	
	Q. What is Exception Handling?
	A. To tackle the runtime problem in the code.
	
	Q. Why to use exception handling?
	A. To avoid runtime problem, we MUST handle the exception.
	
* Following are the imp keywords in exception handling
	Comes with the block {
		try, catch & finally.
	}
	Simple keywords - throw & throws.
	
* Sequence of classes
	Throwable class --> Exception class --> n number of in-built classes.
	
* Types of exception:
	1. Compile time exception(Checked Exception):
		- The exception that gets detected after the code compilation.
	2. Runtime exception(Unchecked Exception):
		- The exception that gets detected during the execution. 

* Blocks:
	1. try block:
		- The risky code.
		- The code that might throw exception.
	2. catch block:
		- Backup functionality.
		- When try block fails to execute.
	3. finally block:
		- The code to execute by default.
		
* Valid combinations:(finally should be used only once)
	+ try-catch;
	+ try-catch-finally;
	+ try-catch-catch-catch-.......-catch;
	+ try-catch-catch-catch-.......-catch-finally;
	+ try-finally;

* Invalid combinations:
	+ try;
	+ catch;
	+ finally;
	+ catch-finally;
	+ catch-catch-catch-.......-catch-finally;
	+ try-finally-catch;
	+ try-finally-finally;
	
* Example:
	main{
		250 LOC;
		//this code will contain multiple exception;
	}
	Therefore: If try block contain some code which can throw different types of exceptions, then in order to handle them
			   differently we MUST have different catch blocks.
			   
* "throw" keyword:
	- The throw keyword is used to EXPLICITLY/FORCEFULLY throw the exception in the program.
	- If we want to re-direct the control to any specific catch block, then we use "throw" keyword by creating object of "Exception"  
	  class in try block. 
	  e.g.- Exception e = new Exception();
	  		e.throw;
	  		
* "throws" keyword:
	- Using throws keyword, the developer informs the JVM about upcoming exception in the block.
	- We can skip try-catch block if we are writing throws keyword in signature of method.
	- How JVM handles the exception is, it simple prints entire stack trace onto the console. 
	
	
November 25::
* Collection Framework in Java-
	- Introduction to Collection Framework
	- Collection Framework Hirarchy
	- Set Interface --> HashSet Class
	
	Q. What is collection framework
	A. It is group or set of n number of in-built classes, interfaces & methods.
	
	Q. Why to use these? Or Advantages of Collection Framework.
	A. 1. To reduce LOC- as we have any in-built methods.
	   2. Increases readability.
	   3. NO limitation on datatype.
	   4. NO limitation on size/length.
	   
	Q. When to use these?
	A. When we need to store multiple values of DIFFERENT TYPES we MUST use collection framework.
	
* Drawbacks of Array:
	- Limitation on datatype.
	- Limitation on size/length.
	
* Drawbacks of Array OVERCOMED in Collection Framework:
	- NO limitation on datatype.
	- NO limitation on size/length.
	
* Hirarchy of Collection Framework
	- Itarable(interface- which consists of abstract methods) --> Collection(interface, implements Iterable) -->
		Set, Queue, List, Map, etc (all are interface, implements Collection)
		
	- Set: Stores unique values at random index.
	
	- In that,
	- HashSet(class implements Set)
	
	
November 28:
queue interface --> linkedlist class;
	
	 

December 7::
Threads:

Process(Main program)--> Dividing process in multiple sub-processes(Threads).

e.g.-
Car racing game --> Has multiple sub-processes also known as "threads" like as Fuel, Map, Car_Life, Score etc.

December 9::
* Collection Framework Revisit:-

* Difference between "Array" and "Collection Framework"

* Arrays-
	1. It can store primitive and non-primitive type of data.
	2. It can store only homogeneous(same) type of data.
	3. Array size is fixed, we cannot increase or decrease the size of array at RUNTIME.
	4.Arrays are inbuilt features of java & thus we have to develop algorithms(our own logic).  

* Collection Framework-
	1. It can store only non-primitive type of data.
	2. It can store hetrogeneous(different) type of data.
	3. We can increase or decrease the size of COLLECTIONS at RUNTIME.
	4. CF is an API which provides pre-defined classes, methods & interfaces.
	
* Data structure-
	- It is a way to store data into a memory in an efficient way(time and space).
	- Types of Data Structures-
		1. Primitive DS:-
			- Here we can only store one value in single entity.
				e.g.- int a=10;
			e.g.-
				short, byte, int, long, float, double, char, boolean.
					- This are used for basic projects like as- Calculator,currency converter etc.
		2. Non-primitive DS:-
			- Here we can store multiple values in single entity
				e.g.- String s = "Hello"(collection of characters)
			i. Linear DS:-
				String, array, list, set, queue, Arraylist, ll etc.
			ii. Non-linear DS:-
				Graph, Tree.
				

* Collection:-
	- It is an interface which is present in "java.util" package (from v1.2)
	- Syntax:
		public interface Collection<E> extends Iterable<E>		...<E> is known as Generics
	- Methods of Collection interface:-
		- public boolean add(object obj)
		- public boolean addall(collection c)
		- public boolean remove(object obj)
		- public boolean removeall(collection c)
			- will remove same element from one collection present in another.
		- void clear()
		- boolean contains(object obj)
		- boolean containsAll(collection c)
		- boolean isEmpty()
		- int size()
		- Iterator iterator()
		
		
* Collection Framework:-
	- Collection(Interface): It is single entity or object to store multiple data/values
	- Framework: Represents library(in-built classes, interfaces and methods)
	- Collections(Utility Class): It contains only static methods.
	1. Collection Framework: 
		- It is set of predefined classes & interfaces which is used to store multiple data.
	2. It contains two main parts
		- java.util.Collection;
		- java.util.Map;
		
* Hirarchy:
	Collection(i)-->(List(i)-->ArrayList(c),LinkedList(c),(Vector(LC))-->Stack(LC)),
					(Set(i)-->(HashSet(c)-->LinkedHasSet(c)),SortedSet(c)),
					(Queue(i)-->PriorityQueue(c),(Deque(i)--ArrayDeque(c)))
		- For this we create collection object
			e.g.- ArrayList al = new ArrayList();
		- It stores only objects.
					
	Map(i)-->((HashMap(c)-->LinkedHashMap(c)),SortedMap(c),HashTable)
		- For this we create map object
			e.g.- HashMap map = new HashMap();
		- It stores Key-Value pairs.
	
	- This both things make "Collection Framework";
	
	
* We can create object of Class by giving reference of Interface-
	- e.g. List(interface) & ArrayList(class)
		List l=new ArrayList();
		

* Cursors in Collection:
	1. Iterator
	2. ListIterator
	3. Enumeration			...(Different than adv. concept Enum)
	
* Difference between iterator and listiterator
	- Iterator:
		1. We can get Iterator cursor by "iterator()" method.
			i.e. Iterator itr(reference)=l(List reference).iterator();
		2. Iterator cursor can be used with any collection object.
		3. Iterator methods are:
			hasNext(), next(), remove()
		4. By using iterator cursor, we can retrieve the elements only in FORWARD direction.
		5. By using iterator cursor, we can read and remove the elements.
		
	- ListIterator:
		1. We can get ListIterator cursor by "ListIterator()" method.
			i.e. ListIterator litr=l.listIterator();
		2. ListIterator cursor can be used only with List implemented Classes.
		3. ListIterator methods are:
			hasNext(), next(), hasPreious(), previous(), remove(), set()
		4. By using ListItertor cursor, we can retrieve the elements in FORWARD & BACKWARD directions.
		5. By using ListItertor cursor, we can read, remove, replace & add the elements.
		
December 10:: ...continued

* Enumeration-
	- It is cursor which is used to retrieve collection objects one by one.
	- It was introduced in JDK v1.0.
	- It can be used only with legacy classes(lc) i.e. Vector & Stack.
	- We can get it by "elements()" method
		i.e. Enumeration e = v.elements();
	- Methods of enumeration:
		hasMoreElements(), nextElement()
	- It can be used to retrieve the elements only in FORWARD direction.
	- We can only perform read operations.
	
	
* Difference between List interface & Set interface:
	1. List:
		- It is index based DS.
		- It can store duplicate elements.
		- It can store any number of null values.
		- It follows insertion order.
		- In list we can iterate(get) elements by iterator & ListIterator both. 
	
	2. Set:
		- Set is not an index based DS. It stores the data according to the "HashCode values".
		- Set does not allows to store duplicate values. We can only store "Uniques".
		- It can store only one null value.
		- It does not follows insertion order.
		- We can iterate the set elements by only Iterator.
	
	
	

* ArrayList
	- ArrayList(class) which implements List(interface) present in java.util package.
	- ArrayList is created on the basis of "Re-sizable ARRAY".

	* Properties of Arraylist:
		1. They are index based DS as array.
		2. They can store different type of data or hetrogeneous data-types.
		3. They can store duplicates.
		4. They can store any number of null values.
		5. They follow insertion order.
		6. They does not follows the sorting order.
		7. ArrayList are "non-synchronized" collection.
			i.e. Multiple threads are executed at a time.
			     - Parallel execution.
			     - Not thread safe.
			     - No data consistency.
			

* LinkedList:
	- LinkedList is an implemented class of List interface which is present in "java.util" package.
	- The underline data-structure of LinkedList is
		+ Doubly LinkedList:
			- Here First and last nodes are not connected.
		+ Circular LinkedList
			- Here First and last nodes are connected.
		
		- Here node consists: 
			previous node address || Element || next node address

	* Advantages of LinkedList(Doubly & Circular):
		- Process of insertion & deletion becomes efficient and fast.
		- We can traverse the List in forward and backward directions both.
		
	* Dis-advantages of LinkedList(Doubly & Circular):
		- It occupies extra space for "previous node address".
		- In case of insertion & deletion of element in between, we have to manage previous and next node.
		
	* Properties of LinkedList:
		1. They are index based DS as array.
		2. They can store different type of data or hetrogeneous data-types.
		3. They can store duplicates.
		4. They can store any number of null values.
		5. They follow insertion order.
		6. They does not follows the sorting order.
		7. LinkedList are "non-synchronized" collection.
			i.e. Multiple threads are executed at a time.
			     - Parallel execution.
			     - Not thread safe.
			     - No data consistency.


* Difference between ArrayList & LinkedList:
	- ArrayList:
		1. They acts as a List.
		2. The underline DS of ArrayList is "re-sizable" array.
		3. Elements are stored in contiguous memory locations.
		4. ArrayList are good at retrieval(to get values from DS) operations.
		5. ArrayList are worst at insertion & deletion operations.
	
	- LinkedList:
		1. They acts as a List as well as Deque.
		2. The underline DS of LinkedList is "Doubly LL" & "Circular LL".
		3. Elements are not stored(as after & before elements there are previous and next) in contiguous memory locations.
		4. LinkedLists are good at insertion & deletion operations.
		5. LinkedLists are worst at retrieval operations.
		

* JDK v1.0
	- In this version java provided classes and interfaces in which we can store the data/objects.
	  e.g. Vector, Stack, HashTable, Properties, Dictionary
* JDK v1.2
	- In this version collection framework was introduced.
	
	* Legacy Classes:
		- Some classes i.e. Vector, Stack, HashTable etc were introduced in JDK v1.0, but when collection framework was introduced in v1.2
		  these classes were "modified" or say "re-engineered" so that they can be adjusted in new collection hierarchy, so these older
		  classes are known as legacy classes.
		  

* Vector:
	- It is an implemented class of List interface which is present in "java.util" package.
	- The underline DS of vector is "re-sizable array".
	
	* Properties of Vector:
		1. They are index based DS as array.
		2. They can store different type of data or hetrogeneous data-types.
		3. They can store duplicates.
		4. They can store any number of null values.
		5. They follow insertion order.
		6. They does not follows the sorting order.
		7. LinkedList are "Synchronized" collection.
			i.e. Multiple threads are executed at a time.
			     - One-by-one execution.
			     - Thread safe.
			     - Data consistency.
			     
	* Methods of Vector class:
		- addElement(obj), firstElement(), lastElement(), removeElement(obj), removeElementAt(int index), removeAllElements()
		  capacity()
		  

* Difference between ArrayList and Vector:
	- ArrayList:
		1. It was introduced in JDK v1.2.
		2. It is not a legacy class.
		3. It is Non-synchronized collection.
		4. It is thread unsafe.
		5. Here application speed is fast(becoz of Non-synchronized thread).
		6. It does not guarantee for data consistency.
		7. Here, initial/default capacity is 10, and
		   new capacity = (old capacity * 3)/2 + 1;
		8. It does not provide any method to find capacity.  
	
	- Vector:
		1. It was introduced in JDK v1.0.
		2. It is a legacy class.
		3. It is a Synchronized collection.
		4. It is thread safe.
		5. Here application speed is slow(becoz of synchronized thread).
		6. It guarantee for data consistency.
		7. Here, initial/default capacity is 10, and
		   new capacity = (old capacity * 2);
		8. It provide a method 
		   i.e. "int capacity()" to find capacity.




























IMPORTANT Points::
	- final variable = constant
	- static & final variable = pure constant
	- when interface INHERIT interface the term used is "EXTEND"
	  and when class INHERIT interface the term used is "IMPLEMENTS"
	- All "Legacy Classes" are Thread Synchronized.


